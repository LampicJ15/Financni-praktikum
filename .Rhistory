setwd("~/GitHub/Financni-praktikum")
library(readr)
library(actuar)
library(readtext)
vzorec <- read.table("vzorec3.txt")
histogram1 <-hist(vzorec[[1]],breaks = 50,
main = "Histogram škodnih zahtevkov",
xlab = "Škodni zahtevki",
ylab ="Višina škodnih zahtevkov",
col ="cornflowerblue")
parametri <- mde(vzorec[[1]], ppareto1, start  = list(shape=1,min =1), measure = "CvM")
alfa <- parametri$estimate[1]
min <- parametri$estimate[2]
alfa
min
histogram1 <-hist(vzorec[[1]],breaks = 50,
main = "Histogram škodnih zahtevkov",
xlab = "Škodni zahtevki",
ylab ="Višina škodnih zahtevkov",
col ="cornflowerblue",
probability = TRUE)
curve( dpareto1(x, shape = alfa,min = min ),from = 0, to = max(vzorec[[1]]), add = TRUE)
plot(ecdf(vzorec[[1]]),main = "Porazdelitvena funkcija odškodnin",
ylab = "Porazdelitvena funkcija",
xlab="Višina odškodnine")
curve(ppareto1(x, shape = alfa,min = min ),
from=0, to =40,
add = TRUE,
col= "red",
lwd = 2)
legend("bottomright",c("Vzorčna funkcija","Porazdeltivena funkcija"),col = c("black","red"),lty = 1)
upanje.Y <- as.numeric( alfa*min/(alfa-1)) #
upanje.N <- 15
upanje.S <- upanje.N * upanje.Y
var.S <- Inf #ker je var.Y = Inf
upanje.Y
upanje.S
m <- 1
M <-40
h <- 0.5
m <- 1
M <-40
h <- 0.5 #dolžina koraka
diskretnaY <- discretize(ppareto1(x,shape = alfa, min = min),
from = m,
to = (M + 0.5),
step = h,
method = "rounding"
)
diskretnaY2 <- discretize(ppareto1(x,shape = alfa, min = min), #za kasnejšo uporabo pri panjerjevemu algoritmu
from = 0,
to = 100000,
step = h)
poraz.Y <- stepfun(seq(m,M,h), diffinv(diskretnaY)) #diffinv nam da porazdelitveno funkcijo
poraz.Y <- stepfun(seq(m,M,h), diffinv(diskretnaY)) #diffinv nam da porazdelitveno funkcijo
plot(poraz.Y,
main = "Paretova porazdelitev",
do.points = FALSE,
xlab = "x",
ylab = "Porazdelitvena funkcija",
col = "red")
curve(ppareto1(x, shape = alfa,min = min ),
from=m, to =M,
add = TRUE,
col= "cornflowerblue",
lwd = 2)
legend("bottomright",c("Diskretna funkcija","Porazdeltivena funkcija"),col = c("red","cornflowerblue"),lty = 1)
F.S <- aggregateDist(method = "recursive",
model.freq = "poisson",
model.sev = diskretnaY2,
lambda = 15,
p0 = exp(-15),
x.scale = h,
convolve = 0,
maxit=1000000,
tol = 0.002)
plot(F.S)
E.S <- sum( knots(F.S) * diff(F.S)) #upanje slučanje spremenljivke S = (vrednosti S)* (skoki v teh točkah)
E.S <- sum( knots(F.S) * diff(F.S)) #upanje slučanje spremenljivke S = (vrednosti S)* (skoki v teh točkah)
E.S2 <- sum( knots(F.S)^2 * diff(F.S)) # drugi moment slučajne spremenljivke S
D.S <- E.S2 - E.S^2 #disperzija od S = E(S^2)-E(S)^2
TV <- VaR(F.S,0.995) #tvegana vrednost
PI <- CTE(F.S, 0.005) #pričakovani izpad
E.S
E.S""
E.S2
D.S
TV
PI
F.S(PI)
F.S(TV)
F.S(120)
simN <- rpois(10000, 15)
simS<-c()
for (n in simN){
simS <- c(simS, sum( rpareto1(n, alfa, min) ))
}
E.simS <- mean(simS)
Var.simS <- var(simS)
E.simS
Var.simS
TV_2 <- sort(simS)[9950]
TV_2
plot(ecdf(simS),
col = 'green',
add = TRUE,
lwd = 2)
legend('bottomright',
legend = c('Panjerjev algoritem', 'Monte Carlo simulacija'),
col = c('black', 'green'),
lty=1:1, cex=0.8)
